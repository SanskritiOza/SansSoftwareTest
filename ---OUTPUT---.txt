---OUTPUT---
================================================= test session starts =================================================
platform win32 -- Python 3.12.1, pytest-7.4.3, pluggy-1.3.0 -- C:\Python312\python.exe
cachedir: .pytest_cache
rootdir: C:\Users\Ms.Sanskriti\downloads
collected 3 items

test_cross_browser.py::test_cross_browser_compatibility[chrome] FAILED                                           [ 33%]
test_cross_browser.py::test_cross_browser_compatibility[firefox] FAILED                                          [ 66%]
test_cross_browser.py::test_cross_browser_compatibility[safari] FAILED                                           [100%]

====================================================== FAILURES =======================================================
______________________________________ test_cross_browser_compatibility[chrome] _______________________________________

browser = 'chrome'

    @pytest.mark.parametrize("browser", browsers)
    def test_cross_browser_compatibility(browser):
        # Initialize the WebDriver based on the specified browser
        if browser == "chrome":
>           driver = webdriver.Chrome(executable_path="C:/Users/Ms.Sanskriti/Downloads/chromedriver-win64/chromedriver-win64/chromedriver.exe")
E           TypeError: WebDriver.__init__() got an unexpected keyword argument 'executable_path'

test_cross_browser.py:12: TypeError
______________________________________ test_cross_browser_compatibility[firefox] ______________________________________

browser = 'firefox'

    @pytest.mark.parametrize("browser", browsers)
    def test_cross_browser_compatibility(browser):
        # Initialize the WebDriver based on the specified browser
        if browser == "chrome":
            driver = webdriver.Chrome(executable_path="C:/Users/Ms.Sanskriti/Downloads/chromedriver-win64/chromedriver-win64/chromedriver.exe")
        elif browser == "firefox":
>           driver = webdriver.Firefox(executable_path="c:/Users/Ms.Sanskriti/Downloads/geckodriver-v0.33.0-win64/geckodriver.exe")
E           TypeError: WebDriver.__init__() got an unexpected keyword argument 'executable_path'

test_cross_browser.py:14: TypeError
______________________________________ test_cross_browser_compatibility[safari] _______________________________________

service = <selenium.webdriver.safari.service.Service object at 0x0000023E20916FC0>
options = <selenium.webdriver.safari.options.Options object at 0x0000023E2094E300>

    @staticmethod
    def get_path(service: Service, options: BaseOptions) -> str:
        path = service.path
        try:
>           path = SeleniumManager().driver_location(options) if path is None else path

C:\Python312\Lib\site-packages\selenium\webdriver\common\driver_finder.py:38:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Python312\Lib\site-packages\selenium\webdriver\common\selenium_manager.py:103: in driver_location
    output = self.run(args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

args = ['C:\\Python312\\Lib\\site-packages\\selenium\\webdriver\\common\\windows\\selenium-manager.exe', '--browser', 'safari', '--output', 'json']

    @staticmethod
    def run(args: List[str]) -> dict:
        """Executes the Selenium Manager Binary.

        :Args:
         - args: the components of the command being executed.
        :Returns: The log string containing the driver location.
        """
        if logger.getEffectiveLevel() == logging.DEBUG:
            args.append("--debug")
        args.append("--output")
        args.append("json")

        command = " ".join(args)
        logger.debug("Executing process: %s", command)
        try:
            if sys.platform == "win32":
                completed_proc = subprocess.run(args, capture_output=True, creationflags=subprocess.CREATE_NO_WINDOW)
            else:
                completed_proc = subprocess.run(args, capture_output=True)
            stdout = completed_proc.stdout.decode("utf-8").rstrip("\n")
            stderr = completed_proc.stderr.decode("utf-8").rstrip("\n")
            output = json.loads(stdout)
            result = output["result"]
        except Exception as err:
            raise WebDriverException(f"Unsuccessful command executed: {command}") from err

        for item in output["logs"]:
            if item["level"] == "WARN":
                logger.warning(item["message"])
            if item["level"] == "DEBUG" or item["level"] == "INFO":
                logger.debug(item["message"])

        if completed_proc.returncode:
>           raise WebDriverException(f"Unsuccessful command executed: {command}.\n{result}{stderr}")
E           selenium.common.exceptions.WebDriverException: Message: Unsuccessful command executed: C:\Python312\Lib\site-packages\selenium\webdriver\common\windows\selenium-manager.exe --browser safari --output json.
E           {'code': 65, 'message': 'safaridriver not available for download', 'driver_path': '', 'browser_path': ''}

C:\Python312\Lib\site-packages\selenium\webdriver\common\selenium_manager.py:149: WebDriverException

The above exception was the direct cause of the following exception:

browser = 'safari'

    @pytest.mark.parametrize("browser", browsers)
    def test_cross_browser_compatibility(browser):
        # Initialize the WebDriver based on the specified browser
        if browser == "chrome":
            driver = webdriver.Chrome(executable_path="C:/Users/Ms.Sanskriti/Downloads/chromedriver-win64/chromedriver-win64/chromedriver.exe")
        elif browser == "firefox":
            driver = webdriver.Firefox(executable_path="c:/Users/Ms.Sanskriti/Downloads/geckodriver-v0.33.0-win64/geckodriver.exe")
        elif browser == "safari":
>           driver = webdriver.Safari()

test_cross_browser.py:16:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Python312\Lib\site-packages\selenium\webdriver\safari\webdriver.py:48: in __init__
    self.service.path = DriverFinder.get_path(self.service, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

service = <selenium.webdriver.safari.service.Service object at 0x0000023E20916FC0>
options = <selenium.webdriver.safari.options.Options object at 0x0000023E2094E300>

    @staticmethod
    def get_path(service: Service, options: BaseOptions) -> str:
        path = service.path
        try:
            path = SeleniumManager().driver_location(options) if path is None else path
        except Exception as err:
            msg = f"Unable to obtain driver for {options.capabilities['browserName']} using Selenium Manager."
>           raise NoSuchDriverException(msg) from err
E           selenium.common.exceptions.NoSuchDriverException: Message: Unable to obtain driver for safari using Selenium Manager.; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors/driver_location

C:\Python312\Lib\site-packages\selenium\webdriver\common\driver_finder.py:41: NoSuchDriverException
=============================================== short test summary info ===============================================
FAILED test_cross_browser.py::test_cross_browser_compatibility[chrome] - TypeError: WebDriver.__init__() got an unexpected keyword argument 'executable_path'
FAILED test_cross_browser.py::test_cross_browser_compatibility[firefox] - TypeError: WebDriver.__init__() got an unexpected keyword argument 'executable_path'
FAILED test_cross_browser.py::test_cross_browser_compatibility[safari] - selenium.common.exceptions.NoSuchDriverException: Message: Unable to obtain driver for safari using Selenium Manage...
================================================== 3 failed in 0.28s ==================================================






2. 
